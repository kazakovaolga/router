{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://router/./src/router.ts","webpack://router/./src/utils.ts","webpack://router/./src/getRandomColor.ts","webpack://router/./src/index.ts"],"sourcesContent":["import { Listener,Content } from \"./types\"\n\n// IMPLEMENTATION\nexport function Router() {\n  let listeners: Listener[] = [];\n  let currentPath: string = location.pathname;\n  let previousPath: string | null = null;\n\n  const isMatch = (match: Function | string, path: string | null) =>\n    (match instanceof RegExp && match.test(path as string)) ||\n    (typeof match === \"function\" && match(path)) ||\n    (typeof match === \"string\" && match === path);\n\n  const handleListener = async({ match, onBeforeEnter, onEnter, onLeave }) => {\n    const args = { currentPath, previousPath, state: history.state };\n\n    onBeforeEnter && await onBeforeEnter(args);\n    onEnter && isMatch(match, currentPath) && await onEnter(args);\n    onLeave && isMatch(match, previousPath) && await onLeave(args);\n    // isMatch(match, currentPath) && onEnter(args);\n  };\n\n  const handleAllListeners = () => listeners.forEach(handleListener);\n\n  const generateId = () => {\n    const getRandomNumber = () =>\n      Math.floor(Math.random() * listeners.length * 1000);\n    const doesExist = (id: number) => listeners.find((listener) => listener[id] === id);\n\n    let id = getRandomNumber();\n    while (doesExist(id)) {\n      id = getRandomNumber();\n    }\n    return id;\n  };\n\n  //  const on = (match:Function|string|RegExp , onBeforeEnter:(content: string)=>void, onEnter:(content: string)=>void, onLeave) => {\n  const on = (match: Function | string | RegExp, onBeforeEnter, onEnter, onLeave) => {\n    const id = generateId();\n\n    const listener = { id, match, onBeforeEnter, onEnter, onLeave };\n    listeners.push(listener);\n    handleListener(listener);\n\n    return () => {\n      return listeners = listeners.filter((listener) => listener[id] !== id);\n    };\n  };\n\n  const go = (url: string, state?: any) => {\n    previousPath = currentPath;\n    history.pushState(state, url, url);\n    currentPath = location.pathname;\n\n    handleAllListeners();\n  };\n\n  window.addEventListener(\"popstate\", handleAllListeners);\n\n  return { on, go };\n}\n","import { getRandomColor } from \"./getRandomColor\";\nimport { Content } from \"./types\";\n\nasync function getImage() {\n    const url = `https://aws.random.cat/meow`;\n    let response = await fetch(url);\n    let status = response.status;\n    let json = await response.json();\n    console.log('json=', json);\n    return json;\n};\n\n// USAGEf\nexport const createLogger = (el: HTMLElement, content: string) => () => {\n    //const header = document.querySelector(\".header\") as HTMLHeadElement;\n    if (el) {\n        el.style.backgroundColor = getRandomColor();\n        // console.log('header.style.backgroundColor =', header.style.backgroundColor);\n    };\n    //return header;\n}\n\n\n// export async function createImage(el: HTMLElement) {\n//     console.log(\"createImage el=\", el);\n//     let src = await getImage();\n//     console.log(\"createImage src=\", src.file);\n//     el.innerHTML = `<img src=\"${src.file}\">`;\n// };\n\nexport const createImage = (el: HTMLElement, content: string) => async() => {\n    // console.log(\"createImage content=\", content);\n    // console.log(\"createImage args=\", args);    \n    let src=await getImage();\n    el.innerHTML = el.innerHTML = `<img src=\"${src.file}\">`;\n};\n\n\nexport const leftPage = (el: HTMLElement, content: string) => (...args: Content[]) => {\n    el.innerHTML = `<h2>You have left the page ${content} args=${JSON.stringify(\n        args\n    )}</h2>`;\n    return args;\n};\n\n\n","export function getRandomColor():string {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }","import { Router } from \"./router\";\nimport { createLogger, createImage,leftPage} from \"./utils\";\n\nconst router = Router();\nconst header=document.querySelector('.header') as HTMLElement;\nconst root=document.getElementById('root') as HTMLElement;\nconst footer=document.getElementById('footer') as HTMLElement;\n\nrouter.on(/.*/, createLogger(header,\"/.*\"), createImage(root,\"/.*\"), leftPage(footer,\"/.*\"));\n//router.on(/.*/, createLogger(header), createImage(root), leftPage(footer,\"/.*\"));\n\nrouter.on(\n    (path: string) => path === \"/contacts\",\n    createLogger(header,\"/contacts\"),\n    createImage(root,\"/contacts\"), // onEnter    \n    leftPage(footer,\"/contacts\") // onLeave\n);\nrouter.on(\n    \"/about\",\n    createLogger(header,\"/about\"),\n    createImage(root,\"/about\"),\n    // createImage(root,\"/about\"),    \n    leftPage(footer,\"/about\")\n);\nrouter.on(\n    \"/about/us\",\n    createLogger(header,\"/about/us\"), \n    createImage(root,\"/about/us\"),   \n    // createImage(root,\"/about/us\"),\n    leftPage(footer,\"/about/us\")\n);\n\n(document.querySelector('body') as HTMLElement).addEventListener(\"click\", (event) => {\n    console.log('event=', event);\n    // const el=event.target;\n    // if (!el.matches(\"a\")) {\n    //     return;\n    // }\n\n    if (event !== null && event.target !== null) {\n        const element = event.target as Element;\n\n        if (!element.matches('a')) {\n            return;\n        };\n        \n        const url = element.getAttribute(\"href\") as string;\n        console.log(url);\n        router.go(url);\n    }\n    event.preventDefault();\n    \n    // let url = event.target.getAttribute(\"href\");\n    // router.go(url);\n    //unsubscribe();\n});  "],"names":["i","getImage","fetch","response","status","json","console","log","listeners","currentPath","previousPath","isMatch","handleListener","handleAllListeners","createLogger","el","content","style","backgroundColor","color","Math","floor","random","getRandomColor","createImage","src","innerHTML","file","leftPage","args","JSON","stringify","router","location","pathname","match","path","RegExp","test","onBeforeEnter","onEnter","onLeave","state","history","forEach","window","addEventListener","on","id","getRandomNumber","length","doesExist","find","listener","generateId","push","filter","go","url","pushState","header","document","querySelector","root","getElementById","footer","event","target","element","matches","getAttribute","preventDefault"],"sourceRoot":""}
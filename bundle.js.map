{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://router/./src/router.ts","webpack://router/./src/utils.ts","webpack://router/./src/getRandomColor.ts","webpack://router/./src/index.ts"],"sourcesContent":["import { Listener} from \"./types\"\n\n// IMPLEMENTATION\nexport function Router() {\n  let listeners: Listener[] = [];\n  let currentPath: string = location.pathname;\n  let previousPath: string | null = null;\n\n  const isMatch = (match: Function | string, path: string | null) =>\n    (match instanceof RegExp && match.test(path as string)) ||\n    (typeof match === \"function\" && match(path)) ||\n    (typeof match === \"string\" && match === path);\n\n  const handleListener = async({ match, onBeforeEnter, onEnter, onLeave }) => {\n    const args = { currentPath, previousPath, state: history.state };\n\n    onBeforeEnter && await onBeforeEnter(args);\n    onEnter && isMatch(match, currentPath) && await onEnter(args);\n    onLeave && isMatch(match, previousPath) && await onLeave(args);    \n  };\n\n  const handleAllListeners = () => listeners.forEach(handleListener);\n\n  const generateId = () => {\n    const getRandomNumber = () =>\n      Math.floor(Math.random() * listeners.length * 1000);\n    const doesExist = (id: number) => listeners.find((listener) => listener[id] === id);\n\n    let id = getRandomNumber();\n    while (doesExist(id)) {\n      id = getRandomNumber();\n    }\n    return id;\n  };\n\n  const on = (match: Function | string | RegExp, onBeforeEnter, onEnter, onLeave) => {\n    const id = generateId();\n    const listener = { id, match, onBeforeEnter, onEnter, onLeave };\n    listeners.push(listener);\n    handleListener(listener);\n\n    return () => {\n      return listeners = listeners.filter((listener) => listener[id] !== id);\n    };\n  };\n\n  const go = (url: string, state?: any) => {\n    previousPath = currentPath;\n    history.pushState(state, url, url);\n    currentPath = location.pathname;\n    handleAllListeners();\n  };\n\n  window.addEventListener(\"popstate\", handleAllListeners);\n  return { on, go };\n}\n","import { getRandomColor } from \"./getRandomColor\";\nimport { Content } from \"./types\";\n\nasync function getImage() {\n    const url = `https://aws.random.cat/meow`;\n    let response = await fetch(url);    \n    let json = await response.json();\n    console.log('json=', json);\n    return json;\n};\n\nexport const createLogger = (el: HTMLElement, content: string) => () => {    \n    if (el) {\n        el.style.backgroundColor = getRandomColor();        \n    };    \n}\n\nexport const createImage = (el: HTMLElement, content: string) => async() => {    \n    let src=await getImage();\n    el.innerHTML = `<img src=\"${src.file}\">`;\n    return el;\n};\n\n\nexport const leftPage = (el: HTMLElement, content: string) => (...args: Content[]) => {\n    el.innerHTML = `<h2>You have left the page ${content}</h2>`;\n    return el;\n};\n","export function getRandomColor():string {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }","import { Router } from \"./router\";\nimport { createLogger, createImage,leftPage} from \"./utils\";\n\nconst router = Router();\nconst header=document.querySelector('.header') as HTMLElement;\nconst root=document.getElementById('root') as HTMLElement;\nconst footer=document.getElementById('footer') as HTMLElement;\n\nrouter.on(/\\//, createLogger(header,\"\"), createImage(root,\"\"), leftPage(footer,\"\"));\n\nrouter.on(\n    (path: string) => path === \"/contacts\",\n    createLogger(header,\"/contacts\"),\n    createImage(root,\"/contacts\"), // onEnter    \n    leftPage(footer,\"/contacts\") // onLeave\n);\nrouter.on(\n    \"/about\",\n    createLogger(header,\"/about\"),\n    createImage(root,\"/about\"),\n    // createImage(root,\"/about\"),    \n    leftPage(footer,\"/about\")\n);\nrouter.on(\n    \"/about/us\",\n    createLogger(header,\"/about/us\"), \n    createImage(root,\"/about/us\"),   \n    // createImage(root,\"/about/us\"),\n    leftPage(footer,\"/about/us\")\n);\n\n(document.querySelector('body') as HTMLElement).addEventListener(\"click\", (event) => {\n    if (event !== null && event.target !== null) {\n        const element = event.target as Element;\n\n        if (!element.matches('a')) {\n            return;\n        };\n        \n        const url = element.getAttribute(\"href\") as string;        \n        router.go(url);\n    }\n    event.preventDefault();\n});  "],"names":["i","getImage","fetch","response","json","console","log","listeners","currentPath","previousPath","isMatch","handleListener","handleAllListeners","createLogger","el","content","style","backgroundColor","color","Math","floor","random","getRandomColor","createImage","src","innerHTML","file","leftPage","router","location","pathname","match","path","RegExp","test","onBeforeEnter","onEnter","onLeave","args","state","history","forEach","window","addEventListener","on","id","getRandomNumber","length","doesExist","find","listener","generateId","push","filter","go","url","pushState","header","document","querySelector","root","getElementById","footer","event","target","element","matches","getAttribute","preventDefault"],"sourceRoot":""}